{"mappings":"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","sources":["src/features/shaders/shaders.component.tsx","src/common/shaderDemo/shaderDemo.component.tsx","src/common/shaderView/shaderView.component.tsx","src/common/shaderView/shaderView.module.scss","src/common/shaderDemo/shaderDemo.module.scss","src/assets/shaders/shader1.vert","src/assets/shaders/shader1.frag","src/assets/shaders/shader2.vert","src/assets/shaders/shader2.frag","src/assets/shaders/shader3.vert","src/assets/shaders/shader3.frag"],"sourcesContent":["import { FC } from \"react\";\n\nimport { ShaderDemo } from \"~src/common/shaderDemo/shaderDemo.component\";\nimport { ShaderViewProps } from \"~src/common/shaderView/shaderView.component\";\n\nimport vertexShader1 from \"~src/assets/shaders/shader1.vert\";\nimport fragmentShader1 from \"~src/assets/shaders/shader1.frag\";\nimport vertexShader2 from \"~src/assets/shaders/shader2.vert\";\nimport fragmentShader2 from \"~src/assets/shaders/shader2.frag\";\nimport vertexShader3 from \"~src/assets/shaders/shader3.vert\";\nimport fragmentShader3 from \"~src/assets/shaders/shader3.frag\";\n\nconst Shaders: FC = () => (\n  <section>\n    {(\n      [\n        {\n          vertexShader: vertexShader1,\n          fragmentShader: fragmentShader1,\n          primitive: \"triangle strip\",\n          position: [\n            [-1.0, -1.0, +0, +1],\n            [+1.0, -1.0, +0, +1],\n            [-1.0, +1.0, +0, +1],\n            [+1.0, +1.0, +0, +1],\n          ],\n        },\n        {\n          vertexShader: vertexShader2,\n          fragmentShader: fragmentShader2,\n          primitive: \"triangle strip\",\n          position: [\n            [-0.7, -0.7, +0, +1],\n            [+0.7, -0.7, +0, +1],\n            [-0.7, +0.7, +0, +1],\n            [+0.7, +0.7, +0, +1],\n          ],\n        },\n        {\n          vertexShader: vertexShader3,\n          fragmentShader: fragmentShader3,\n          primitive: \"triangle strip\",\n          position: [\n            [-0.7, -0.7, +0, +1],\n            [+0.7, -0.7, +0, +1],\n            [-0.7, +0.7, +0, +1],\n            [+0.7, +0.7, +0, +1],\n          ],\n        },\n      ] as ShaderViewProps[]\n    ).map((props, index) => (\n      <ShaderDemo key={index} {...props} />\n    ))}\n  </section>\n);\n\nexport default Shaders;\n","import { FC } from \"react\";\n\nimport { useAppSelector } from \"~/src/app/store\";\nimport { Theme } from \"~/src/features/theme/theme.slice\";\nimport {\n  SyntaxHighlighter,\n  styleLight,\n  styleDark,\n} from \"~/src/utilities/syntaxHighlighter\";\nimport {\n  ShaderView,\n  ShaderViewProps,\n} from \"../shaderView/shaderView.component\";\n\nimport styles from \"./shaderDemo.module.scss\";\n\nexport const ShaderDemo: FC<ShaderViewProps> = ({\n  vertexShader,\n  fragmentShader,\n  ...props\n}) => {\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  return (\n    <section className={styles.shader_demo}>\n      <div className={styles.shader_view}>\n        <ShaderView\n          vertexShader={vertexShader}\n          fragmentShader={fragmentShader}\n          {...props}\n        />\n      </div>\n      <div className={styles.shader_syntax}>\n        <SyntaxHighlighter\n          language={\"glsl\"}\n          style={theme === Theme.DARKMODE ? styleDark : styleLight}\n        >\n          {vertexShader}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter\n          language={\"glsl\"}\n          style={theme === Theme.DARKMODE ? styleDark : styleLight}\n        >\n          {fragmentShader}\n        </SyntaxHighlighter>\n      </div>\n    </section>\n  );\n};\n","import { FC, useEffect, useRef } from \"react\";\nimport Regl, { Vec2, Vec4, PrimitiveType } from \"regl\";\n\nimport { Frame } from \"../frame/frame.component\";\nimport styles from \"./shaderView.module.scss\";\n\ninterface Uniforms {\n  u_resolution: Vec2;\n  u_time: number;\n}\n\ninterface Attributes {\n  position: Vec4[];\n}\n\nexport type ShaderViewProps = {\n  vertexShader: string;\n  fragmentShader: string;\n  position: Vec4[];\n  primitive: PrimitiveType;\n};\n\nexport const ShaderView: FC<ShaderViewProps> = ({\n  vertexShader,\n  fragmentShader,\n  position,\n  primitive,\n}) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      const regl = Regl(ref.current);\n      const drawVertices = regl<Uniforms, Attributes>({\n        vert: vertexShader,\n        frag: fragmentShader,\n        attributes: {\n          position,\n        },\n        uniforms: {\n          u_resolution: [\n            regl.context(\"viewportWidth\"),\n            regl.context(\"viewportHeight\"),\n          ],\n          u_time: regl.context(\"time\"),\n        },\n        primitive,\n        count: 4,\n      });\n      regl.frame(() => {\n        regl.clear({ color: [0, 0, 0, 0], depth: 1 });\n        drawVertices();\n      });\n    }\n  }, [ref, vertexShader, fragmentShader]);\n\n  return (\n    <Frame aspect={1 / 1} className={styles.shader_view}>\n      <canvas ref={ref} width={800} height={800} />\n    </Frame>\n  );\n};\n","@use \"../../shared.scss\" as *;\n@use \"../../themed.scss\" as *;\n\n.shader_view {\n  @include card($color-background-container, true, false);\n\n  width: 100%;\n  height: 100%;\n\n  & > canvas {\n    margin: 0;\n  }\n}\n","@use \"../../shared.scss\" as *;\n@use \"../../themed.scss\" as *;\n\n.shader_demo {\n  margin-bottom: 2rem;\n\n  @include is_larger_than($sm-breakpoint) {\n    display: grid;\n    gap: 1rem;\n    align-items: center;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n\n.shader_syntax {\n  & > pre {\n    @include card($color-background-container, true, false);\n\n    margin: 0 !important;\n    &:not(:last-child) {\n      margin-bottom: 1rem !important;\n    }\n  }\n}\n\n.shader_view {\n  height: 240px;\n  margin-bottom: 1rem;\n\n  @include is_larger_than($sm-breakpoint) {\n    height: 100%;\n    margin-bottom: initial;\n  }\n}\n","precision mediump float;\n\nuniform float u_time;\n\nattribute vec4 position;\n\nvoid main() {\n    gl_Position = vec4(position.xyz, 1.0);\n}\n","precision mediump float;\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / u_resolution;\n\n    float color = 0.0;\n\n    color += sin(uv.y * cos(u_time / 21.0) * 12.0)\n        + sin(uv.x * cos(u_time / 10.0) * 20.0);\n    color += sin(uv.x * cos(u_time / 43.0) * 24.0)\n        + cos(uv.y * cos(u_time / 20.0) * 30.0);\n    color += sin(uv.y * sin(u_time / 65.0) * 36.0)\n        + cos(uv.x * sin(u_time / 30.0) * 40.0);\n    color += sin(uv.x * sin(u_time / 87.0) * 48.0)\n        + sin(uv.y * sin(u_time / 40.0) * 50.0);\n\n    gl_FragColor = vec4(\n        vec3(\n            color * 0.65,\n            color * 0.4,\n            color * 0.85\n        ),\n        1.0\n    );\n}\n","precision mediump float;\n\nuniform float u_time;\n\nattribute vec4 position;\n\nvoid main() {\n    mat3 rotation = mat3(\n        vec3( cos(u_time), sin(u_time), 0.0),\n        vec3(-sin(u_time), cos(u_time), 0.0),\n        vec3(         0.0,         0.0, 1.0)\n    );\n    gl_Position = vec4(rotation * position.xyz, 1.0);\n}\n","precision mediump float;\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / u_resolution;\n\n    gl_FragColor = vec4(\n        vec3(\n            0.65 * (sin(u_time + uv.x) * 0.3 + 0.7),\n            0.4 * (cos(u_time + uv.y) * 0.3 + 0.7),\n            0.85 * (sin(u_time + uv.x) * 0.3 + 0.7)\n        ),\n        1.0\n    );\n}\n","precision mediump float;\n\nuniform float u_time;\n\nattribute vec4 position;\n\nvoid main() {\n    mat3 rotation = mat3(\n        vec3(1.0,         0.0,         0.0),\n        vec3(0.0,  cos(u_time),  sin(u_time)),\n        vec3(0.0, -sin(u_time),  cos(u_time))\n    );\n\n    vec3 projected = rotation * position.xyz;\n    float perspective_ratio = projected.z * 0.3 + 1.0;\n\n    gl_Position = vec4(projected / perspective_ratio, 1.0);\n}\n","precision mediump float;\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / u_resolution;\n\n    gl_FragColor = vec4(\n        vec3(\n            0.65 * (sin(u_time + uv.x) * 0.3 + 0.7),\n            0.4 * (cos(u_time + uv.y) * 0.3 + 0.7),\n            0.85 * (sin(u_time + uv.x) * 0.3 + 0.7)\n        ),\n        1.0\n    );\n}\n"],"names":["$lKtKv","parcelRequire","$7f07a3dc4c62428a$export$2e2bcd8739ae039","jsx","vertexShader","$parcel$interopDefault","$71QI2","fragmentShader","$9Snka","primitive","position","$1HWdX","$gfI2p","$cfhpa","$4nQBY","map","props","index","$3Lj83","ShaderDemo","$6a46d818bcf6984f$export$c691ce0b43a64cb2","theme","$hTxeE","useAppSelector","state","jsxs","className","$hOEIm","shader_demo","shader_view","$cflIb","ShaderView","shader_syntax","$cqg0o","SyntaxHighlighter","language","style","$ee91V","Theme","DARKMODE","styleDark","styleLight","$7567eb09d751c200$export$ec92a3ab06ae2ae2","ref","$fPSy9","useRef","useEffect","current","regl","$lrQbr","drawVertices","vert","frag","attributes","uniforms","u_resolution","context","u_time","count","frame","clear","color","depth","$gHXkF","Frame","aspect","$ePSYF","width","height","$acd0798002a968fa$export$447389b194657347","$cf86b037a886b2fb$export$157037839347bb9","$cf86b037a886b2fb$export$fa3e70b0974fa065","$cf86b037a886b2fb$export$447389b194657347","module","exports"],"version":3,"file":"shaders.component.b69e2465.js.map"}