{"mappings":"ycAAA,IAAAA,EAAAC,EAAA,S,2CAuBAC,EAjBoB,KAClB,EAAAF,EAAAG,KAAC,W,UACC,EAAAH,EAAAG,KAACC,EAAAC,WAAS,CACRC,aAAcC,EAAAC,GACdC,eAAgBF,EAAAG,GAChBC,SAAU,CACR,EAAC,GAAI,GACL,CAAC,GAAG,GACJ,CAAC,EAAG,GACJ,EAAC,GAAI,GACL,EAAC,EAAI,GACL,CAAC,EAAG,O,wECjBZ,IAAAX,EAAAC,EAAA,S,iEAmBO,MAAMW,EAAkC,EAACN,aAC9CA,EAAYG,eACZA,EAAcE,SACdA,MAEA,MAAME,GAAQ,EAAAC,EAAAC,iBAAgBC,GAAUA,EAAMH,MAAMA,QAEpD,OACE,EAAAb,EAAAiB,MAAC,WAAQC,UAAWX,EAAAY,GAAOC,Y,WACzB,EAAApB,EAAAG,KAAC,OAAIe,UAAWX,EAAAY,GAAOE,Y,UACrB,EAAArB,EAAAG,KAACmB,EAAAC,WAAS,CACRjB,aAAcA,EACdG,eAAgBA,EAChBE,SAAUA,OAGd,EAAAX,EAAAiB,MAAC,OAAIC,UAAWX,EAAAY,GAAOK,c,WACrB,EAAAxB,EAAAG,KAACsB,EAAAC,kBAAgB,CACfC,SAAU,OACVC,MAAOf,IAAUgB,EAAAC,MAAMC,SAAWN,EAAAO,UAAYP,EAAAQ,W,SAE7C3B,KAEH,EAAAN,EAAAG,KAACsB,EAAAC,kBAAgB,CACfC,SAAU,OACVC,MAAOf,IAAUgB,EAAAC,MAAMC,SAAWN,EAAAO,UAAYP,EAAAQ,W,SAE7CxB,S,yEC9CX,IAAAT,EAAAC,EAAA,S,oDAqBO,MAAMiC,EAAoC,EAAC5B,aAChDA,EAAYG,eACZA,EAAcE,SACdA,MAEA,MAAMwB,GAAM,EAAAC,EAAAC,QAA0B,MA2BtC,OAzBA,EAAAD,EAAAE,YAAU,KACR,GAAIH,EAAII,QAAS,CACf,MAAMC,EAAOjC,EAAAkC,EAAA,CAAKN,EAAII,SAChBG,EAAeF,EAA2B,CAC9CG,KAAMrC,EACNsC,KAAMnC,EACNoC,WAAY,CACVlC,SAAU6B,EAAKM,OAAOnC,IAExBoC,SAAU,CACRC,aAAc,CACZR,EAAKS,QAAQ,iBACbT,EAAKS,QAAQ,mBAEfC,OAAQV,EAAKS,QAAQ,SAEvBE,MAAOxC,EAASyC,SAElBZ,EAAKa,OAAM,KACTb,EAAKc,MAAM,CAAEC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAIC,MAAO,IACzCd,GAAA,GAEJ,IACC,CAACP,EAAK7B,EAAcG,KAGrB,EAAAT,EAAAG,KAACsD,EAAAC,MAAI,CAAEC,OAAQ,EAAI,IAAKzC,UAAWX,EAAAqD,GAAOvC,Y,UACxC,EAAArB,EAAAG,KAAC,UAAOgC,IAAKA,EAAK0B,MAAO,IAAMC,OAAQ,O,4itHCvD7C,IAAAC,E,4CAAAA,EAAgC,iC,sCCAhC,IAAAC,EACAC,EACAC,E,sIAFAF,EAAgC,kCAChCC,EAAkC,oCAClCC,EAAgC,iC,sCCFhCC,EAAAC,QAAe,wI,sCCAfD,EAAAC,QAAe,svB","sources":["src/features/shaders/shaders.component.tsx","src/common/shaderDemo/shaderDemo.component.tsx","src/common/shaderView/shaderView.component.tsx","src/common/shaderView/shaderView.module.scss","src/common/shaderDemo/shaderDemo.module.scss","src/assets/shaders/test.vert","src/assets/shaders/test.frag"],"sourcesContent":["import { FC } from \"react\";\n\nimport { ShaderDemo } from \"~src/common/shaderDemo/shaderDemo.component\";\nimport vertexShader from \"~src/assets/shaders/test.vert\";\nimport fragmentShader from \"~src/assets/shaders/test.frag\";\n\nconst Shaders: FC = () => (\n  <section>\n    <ShaderDemo\n      vertexShader={vertexShader}\n      fragmentShader={fragmentShader}\n      position={[\n        [-1, -1],\n        [1, -1],\n        [1, 1],\n        [-1, -1],\n        [-1, 1],\n        [1, 1],\n      ]}\n    />\n  </section>\n);\n\nexport default Shaders;\n","import { FC } from \"react\";\n\nimport { useAppSelector } from \"~/src/app/store\";\nimport { Theme } from \"~/src/features/theme/theme.slice\";\nimport {\n  SyntaxHighlighter,\n  styleLight,\n  styleDark,\n} from \"~/src/utilities/syntaxHighlighter\";\nimport { ShaderView } from \"../shaderView/shaderView.component\";\n\nimport styles from \"./shaderDemo.module.scss\";\n\ntype ShaderDemoProps = {\n  vertexShader: string;\n  fragmentShader: string;\n  position: number[][];\n};\n\nexport const ShaderDemo: FC<ShaderDemoProps> = ({\n  vertexShader,\n  fragmentShader,\n  position,\n}) => {\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  return (\n    <section className={styles.shader_demo}>\n      <div className={styles.shader_view}>\n        <ShaderView\n          vertexShader={vertexShader}\n          fragmentShader={fragmentShader}\n          position={position}\n        />\n      </div>\n      <div className={styles.shader_syntax}>\n        <SyntaxHighlighter\n          language={\"glsl\"}\n          style={theme === Theme.DARKMODE ? styleDark : styleLight}\n        >\n          {vertexShader}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter\n          language={\"glsl\"}\n          style={theme === Theme.DARKMODE ? styleDark : styleLight}\n        >\n          {fragmentShader}\n        </SyntaxHighlighter>\n      </div>\n    </section>\n  );\n};\n","import { FC, useEffect, useRef } from \"react\";\nimport Regl, { Vec2, Buffer } from \"regl\";\n\nimport { Frame } from \"../frame/frame.component\";\nimport styles from \"./shaderView.module.scss\";\n\ninterface Uniforms {\n  u_resolution: Vec2;\n  u_time: number;\n}\n\ninterface Attributes {\n  position: Buffer;\n}\n\ntype ShaderCanvasProps = {\n  vertexShader: string;\n  fragmentShader: string;\n  position: number[][];\n};\n\nexport const ShaderView: FC<ShaderCanvasProps> = ({\n  vertexShader,\n  fragmentShader,\n  position,\n}) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      const regl = Regl(ref.current);\n      const drawVertices = regl<Uniforms, Attributes>({\n        vert: vertexShader,\n        frag: fragmentShader,\n        attributes: {\n          position: regl.buffer(position),\n        },\n        uniforms: {\n          u_resolution: [\n            regl.context(\"viewportWidth\"),\n            regl.context(\"viewportHeight\"),\n          ],\n          u_time: regl.context(\"time\"),\n        },\n        count: position.length,\n      });\n      regl.frame(() => {\n        regl.clear({ color: [0, 0, 0, 0], depth: 1 });\n        drawVertices();\n      });\n    }\n  }, [ref, vertexShader, fragmentShader]);\n\n  return (\n    <Frame aspect={2 / 2.1} className={styles.shader_view}>\n      <canvas ref={ref} width={1000} height={1000} />\n    </Frame>\n  );\n};\n","@use \"../../shared.scss\" as *;\n@use \"../../themed.scss\" as *;\n\n.shader_view {\n  @include card($color-background-container, true, false);\n\n  width: 100%;\n  height: 100%;\n}\n","@use \"../../shared.scss\" as *;\n@use \"../../themed.scss\" as *;\n\n.shader_demo {\n  @include is_larger_than($sm-breakpoint) {\n    display: grid;\n    gap: 1rem;\n    align-items: center;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n\n.shader_syntax {\n  & > pre {\n    @include card($color-background-container, true, false);\n\n    margin: 0 !important;\n    &:not(:last-child) {\n      margin-bottom: 1rem !important;\n    }\n  }\n}\n\n.shader_view {\n  height: 240px;\n  margin-bottom: 1rem;\n\n  @include is_larger_than($sm-breakpoint) {\n    height: 100%;\n    margin-bottom: initial;\n  }\n}\n","precision mediump float;\n\nattribute vec2 position;\n\nvoid main() {\n    gl_Position = vec4(position, 0, 1);\n}\n","precision mediump float;\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / u_resolution;\n\n    float color = 0.0;\n\n    color += sin(uv.y * cos(u_time / 21.0) * 12.0)\n        + sin(uv.x * cos(u_time / 10.0) * 20.0);\n    color += sin(uv.x * cos(u_time / 43.0) * 24.0)\n        + cos(uv.y * cos(u_time / 20.0) * 30.0);\n    color += sin(uv.y * sin(u_time / 65.0) * 36.0)\n        + cos(uv.x * sin(u_time / 30.0) * 40.0);\n    color += sin(uv.x * sin(u_time / 87.0) * 48.0)\n        + sin(uv.y * sin(u_time / 40.0) * 50.0);\n\n    gl_FragColor = vec4(\n        vec3(\n            color * 0.65,\n            color * 0.4,\n            color * 0.85\n        ),\n        1.0\n    );\n}\n"],"names":["$lKtKv","parcelRequire","$7f07a3dc4c62428a$export$2e2bcd8739ae039","jsx","$3Lj83","ShaderDemo","vertexShader","$parcel$interopDefault","$llDEg","fragmentShader","$dJeJW","position","$6a46d818bcf6984f$export$c691ce0b43a64cb2","theme","$hTxeE","useAppSelector","state","jsxs","className","$hOEIm","shader_demo","shader_view","$cflIb","ShaderView","shader_syntax","$cqg0o","SyntaxHighlighter","language","style","$ee91V","Theme","DARKMODE","styleDark","styleLight","$7567eb09d751c200$export$ec92a3ab06ae2ae2","ref","$fPSy9","useRef","useEffect","current","regl","$lrQbr","drawVertices","vert","frag","attributes","buffer","uniforms","u_resolution","context","u_time","count","length","frame","clear","color","depth","$gHXkF","Frame","aspect","$ePSYF","width","height","$acd0798002a968fa$export$447389b194657347","$cf86b037a886b2fb$export$157037839347bb9","$cf86b037a886b2fb$export$fa3e70b0974fa065","$cf86b037a886b2fb$export$447389b194657347","module","exports"],"version":3,"file":"shaders.component.d9df625e.js.map"}